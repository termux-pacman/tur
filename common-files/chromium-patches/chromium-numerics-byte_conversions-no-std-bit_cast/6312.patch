std::bit_cast doesn't exist in libstdcxx 10

--- a/base/numerics/byte_conversions.h
+++ b/base/numerics/byte_conversions.h
@@ -11,6 +11,7 @@
 #include <span>
 #include <type_traits>
 
+#include "absl/base/casts.h"
 #include "base/numerics/basic_ops_impl.h"
 
 namespace base::numerics {
@@ -80,7 +81,7 @@
 // storage, and explicit big endian for network order.
 inline constexpr float FloatFromNativeEndian(
     std::span<const uint8_t, 4u> bytes) {
-  return std::bit_cast<float>(U32FromNativeEndian(bytes));
+  return absl::bit_cast<float>(U32FromNativeEndian(bytes));
 }
 // Returns a double with the value in `bytes` interpreted as the native endian
 // encoding of the number for the machine.
@@ -91,7 +92,7 @@
 // storage, and explicit big endian for network order.
 inline constexpr double DoubleFromNativeEndian(
     std::span<const uint8_t, 8u> bytes) {
-  return std::bit_cast<double>(U64FromNativeEndian(bytes));
+  return absl::bit_cast<double>(U64FromNativeEndian(bytes));
 }
 
 // Returns a uint8_t with the value in `bytes` interpreted as a little-endian
@@ -156,7 +157,7 @@
 // buffer.
 inline constexpr float FloatFromLittleEndian(
     std::span<const uint8_t, 4u> bytes) {
-  return std::bit_cast<float>(U32FromLittleEndian(bytes));
+  return absl::bit_cast<float>(U32FromLittleEndian(bytes));
 }
 // Returns a double with the value in `bytes` interpreted as a little-endian
 // encoding of the integer.
@@ -168,7 +169,7 @@
 // buffer.
 inline constexpr double DoubleFromLittleEndian(
     std::span<const uint8_t, 8u> bytes) {
-  return std::bit_cast<double>(U64FromLittleEndian(bytes));
+  return absl::bit_cast<double>(U64FromLittleEndian(bytes));
 }
 
 // Returns a uint8_t with the value in `bytes` interpreted as a big-endian
@@ -223,7 +224,7 @@
 // that were always in memory, such as when stored in shared-memory (or through
 // IPC) as a byte buffer.
 inline constexpr float FloatFromBigEndian(std::span<const uint8_t, 4u> bytes) {
-  return std::bit_cast<float>(U32FromBigEndian(bytes));
+  return absl::bit_cast<float>(U32FromBigEndian(bytes));
 }
 // Returns a double with the value in `bytes` interpreted as a big-endian
 // encoding of the integer.
@@ -234,7 +235,7 @@
 // IPC) as a byte buffer.
 inline constexpr double DoubleFromBigEndian(
     std::span<const uint8_t, 8u> bytes) {
-  return std::bit_cast<double>(U64FromBigEndian(bytes));
+  return absl::bit_cast<double>(U64FromBigEndian(bytes));
 }
 
 // Returns a byte array holding the value of a uint8_t encoded as the native
@@ -285,7 +286,7 @@
 // byte buffer. Prefer an explicit little endian when storing data into external
 // storage, and explicit big endian for network order.
 inline constexpr std::array<uint8_t, 4u> FloatToNativeEndian(float val) {
-  return U32ToNativeEndian(std::bit_cast<uint32_t>(val));
+  return U32ToNativeEndian(absl::bit_cast<uint32_t>(val));
 }
 // Returns a byte array holding the value of a double encoded as the native
 // endian encoding of the number for the machine.
@@ -295,7 +296,7 @@
 // byte buffer. Prefer an explicit little endian when storing data into external
 // storage, and explicit big endian for network order.
 inline constexpr std::array<uint8_t, 8u> DoubleToNativeEndian(double val) {
-  return U64ToNativeEndian(std::bit_cast<uint64_t>(val));
+  return U64ToNativeEndian(absl::bit_cast<uint64_t>(val));
 }
 
 // Returns a byte array holding the value of a uint8_t encoded as the
@@ -351,7 +352,7 @@
 // memory, such as when stored in shared-memory (or passed through IPC) as a
 // byte buffer.
 inline constexpr std::array<uint8_t, 4u> FloatToLittleEndian(float val) {
-  return internal::ToLittleEndian(std::bit_cast<uint32_t>(val));
+  return internal::ToLittleEndian(absl::bit_cast<uint32_t>(val));
 }
 // Returns a byte array holding the value of a double encoded as the
 // little-endian encoding of the number.
@@ -362,7 +363,7 @@
 // memory, such as when stored in shared-memory (or passed through IPC) as a
 // byte buffer.
 inline constexpr std::array<uint8_t, 8u> DoubleToLittleEndian(double val) {
-  return internal::ToLittleEndian(std::bit_cast<uint64_t>(val));
+  return internal::ToLittleEndian(absl::bit_cast<uint64_t>(val));
 }
 
 // Returns a byte array holding the value of a uint8_t encoded as the big-endian
@@ -418,7 +419,7 @@
 // IPC) as a byte buffer. Use the little-endian encoding for storing and reading
 // from storage.
 inline constexpr std::array<uint8_t, 4u> FloatToBigEndian(float val) {
-  return internal::ToLittleEndian(ByteSwap(std::bit_cast<uint32_t>(val)));
+  return internal::ToLittleEndian(ByteSwap(absl::bit_cast<uint32_t>(val)));
 }
 // Returns a byte array holding the value of a double encoded as the big-endian
 // encoding of the number.
@@ -429,7 +430,7 @@
 // IPC) as a byte buffer. Use the little-endian encoding for storing and reading
 // from storage.
 inline constexpr std::array<uint8_t, 8u> DoubleToBigEndian(double val) {
-  return internal::ToLittleEndian(ByteSwap(std::bit_cast<uint64_t>(val)));
+  return internal::ToLittleEndian(ByteSwap(absl::bit_cast<uint64_t>(val)));
 }
 
 }  // namespace base::numerics
